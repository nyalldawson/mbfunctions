'**************************************************************************
'**************************************************************************
'
' geofunctions.mb - contains useful, geometry related functions for use
' throughout MapBasic.
'
'**************************************************************************
'**************************************************************************

Include "mapbasic.def"
Include "menu.def"
Include "mbfunctions.def"
Include "geofunctions.def"

'Node direction
'Returns true if bearing could be calculated
Function GetNodeBearing( ByVal oObj As Object, ByVal iPolyNo As Integer, ByVal iNode1 As Integer, ByVal iNode2 As Integer, fBearing As Float ) As Logical
	
	' Sanity checks
	If Not ObjectInfo( oObj, OBJ_INFO_NPOLYGONS ) >= iPolyNo Then
		GetNodeBearing = FALSE
		Exit Function
	End If
	If Not ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPolyNo ) >= iNode1 Or Not ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPolyNo ) >= iNode2 Then
		GetNodeBearing = FALSE
		Exit Function
	End If
	
	Dim oNode1, oNode2 As Object
	oNode1 = CreatePoint( ObjectNodeX( oObj, iPolyNo, iNode1 ), ObjectNodeY( oObj, iPolyNo, iNode1 ) )
	oNode2 = CreatePoint( ObjectNodeX( oObj, iPolyNo, iNode2 ), ObjectNodeY( oObj, iPolyNo, iNode2 ) )
	
	fBearing = GetBearing( oNode1, oNode2 )
	GetNodeBearing = TRUE
	
End Function


' Returns a direction of a bearing, relative to a specified reference direction for N
' Also returns an offset amount
Function GetRotatedDirection( ByVal fBearing As Float, ByVal fReference As Float, fOffset As Float ) As Integer
	
	Dim fRotatedBearing As Float
	fRotatedBearing = fBearing - fReference
	
	If fRotatedBearing < 0 Then
		fRotatedBearing = fRotatedBearing + 360
	ElseIf fRotatedBearing >= 360 Then
		fRotatedBearing = fRotatedBearing - 360
	End If
	
	If fRotatedBearing < 45 Or fRotatedBearing >= 315 Then
		GetRotatedDirection = DIRECTION_NORTH
		If fRotatedBearing > 180 Then
			fOffset = fRotatedBearing - 360
		Else
			fOffset = fRotatedBearing
		End If
	ElseIf fRotatedBearing >= 45 And fRotatedBearing < 135 Then
		GetRotatedDirection = DIRECTION_EAST
		fOffset = fRotatedBearing - 90
	ElseIf fRotatedBearing >= 135 And fRotatedBearing < 225 Then
		GetRotatedDirection = DIRECTION_SOUTH
		fOffset = fRotatedBearing - 180
	ElseIf fRotatedBearing >= 225 And fRotatedBearing < 315 Then
		GetRotatedDirection = DIRECTION_WEST
		fOffset = fRotatedBearing - 270
	End If
	
End Function

' Fills in an array with directions between nodes (relative to a reference angle), and returns the average offset
Function CalculateDirections( ByVal oObj As Object, ByVal iPoly As Integer, ByVal fReferenceAngle As Float, iDirections() As Integer ) As Float
	
	' Loop through nodes
	Dim i As Integer
	Dim fTotalOffset, fCurrentOffset, fCurrentBearing As Float
	Dim iCurrentDirection As Integer
	ReDim iDirections(0)
	For i = 1 To ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly ) - 1
		If Not GetNodeBearing( oObj, iPoly, i, i + 1, fCurrentBearing ) Then
			Note "Error in geonodebearing"
			Exit Function
		End If
		
		iCurrentDirection = GetRotatedDirection( fCurrentBearing, fReferenceAngle, fCurrentOffset )
		Call PushIntegerArray( iDirections, iCurrentDirection )
		fTotalOffset = fTotalOffset + fCurrentOffset
	Next
	
	If Not GetNodeBearing( oObj, iPoly, ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly ), 1, fCurrentBearing ) Then
		Note "Error in geonodebearing"
		Exit Function
	End If
	
	iCurrentDirection = GetRotatedDirection( fCurrentBearing, fReferenceAngle, fCurrentOffset )
	Call PushIntegerArray( iDirections, iCurrentDirection )
	fTotalOffset = fTotalOffset + fCurrentOffset
	
	CalculateDirections = fTotalOffset / ( ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly ))
	
End Function

' Rotates a point around a specified origin
Function RotatePoint( ByVal oPoint As Object, ByVal oOrigin As Object, ByVal fAngle As Float ) As Object
	
	' First, get bearing from origin to point
	Dim fBearing As Float
	Dim fDistance As Float
	
	fBearing = GetBearing( oOrigin, oPoint )
	fDistance = Sqr( ( CentroidX( oOrigin ) - CentroidX( oPoint ) ) ^ 2 + ( CentroidY( oOrigin ) - CentroidY( oPoint ) ) ^ 2 )
	
	' Rotate bearing by angle
	fBearing = fBearing + fAngle
	If fBearing < 0 Then
		fBearing = fBearing + 360
	ElseIf fBearing >= 360 Then
		fBearing = fBearing - 360
	End If
	
	' Reproject out from origin
	RotatePoint = ProjectPoint( oOrigin, fBearing, fDistance )
	
End Function

' Rotates all nodes in a polygon around a specified origin
Function RotateNodes( ByVal oObj As Object, ByVal iPoly As Integer, ByVal oOrigin As Object, ByVal fAngle As Float ) As Object
	
	Dim oResult As Object
	oResult = oObj
	Dim i As Integer
	Dim fNewX, fNewY As Float
	Dim fTheta As Float
	fTheta = 0 - DEG_2_RAD * fAngle
	For i = 1 To ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly )
		' Rotate node
		fNewX = Cos( fTheta ) * ( ObjectNodeX( oObj, iPoly, i ) - CentroidX( oOrigin )) - Sin( fTheta ) * ( ObjectNodeY( oObj, iPoly, i ) - CentroidY( oOrigin ))
		fNewY = Sin( fTheta ) * ( ObjectNodeX( oObj, iPoly, i ) - CentroidX( oOrigin )) + Cos( fTheta ) * ( ObjectNodeY( oObj, iPoly, i ) - CentroidY( oOrigin ))
		
		' Update object
		Alter Object oResult Node Set Position iPoly, i ( fNewX + CentroidX( oOrigin ), fNewY + CentroidY( oOrigin ) )
	Next
	
	RotateNodes = oResult
	
End Function

'Returns the centroid of a polygon ring
Function RingCentroid( ByVal oObj As Object, ByVal iPoly As Integer ) As Object
	
	Dim i As Integer
	Dim fSumX, fSumY As Float
	For i = 1 To ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly )
		fSumX = fSumX + ObjectNodeX( oObj, iPoly, i )
		fSumY = fSumY + ObjectNodeY( oObj, iPoly, i )
	Next
	
	RingCentroid = CreatePoint( fSumX / ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly ), fSumY / ObjectInfo( oObj, OBJ_INFO_NPOLYGONS + iPoly ))
End Function


'Orthagonalizes a polygon ring
Function OrthagonalizeRing( ByVal oObj As Object, ByVal iPoly As Integer ) As Object
	Dim oResult As Object
	
	Dim iDirections() As Integer
	Dim fAverageOffset As Float
	Dim lResult As Logical
	
	'Find initial angle between first two nodes
	Dim fInitialAngle As Float
	lResult = GetNodeBearing( oObj, iPoly, 1, 2, fInitialAngle )
	
	'Calculate directions between nodes and average offset
	fAverageOffset = CalculateDirections( oObj, iPoly, fInitialAngle , iDirections )
	Print fAverageOffset
	Dim fRotation As Float
	fRotation = - fAverageOffset - fInitialAngle
	
	' Rotate nodes by average offset so that lines are roughly horizontal/vertical
	Dim oRingCentroid As Object
	oRingCentroid = RingCentroid( oObj, iPoly )
	
	oResult = RotateNodes( oObj, iPoly, oRingCentroid, fRotation )
	
	'Loop through segments
	Dim i As Integer
	Dim fAverageY, fAverageX As Float
	For i = 1 To ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) - 1
		If iDirections(i) = Any( DIRECTION_EAST, DIRECTION_WEST ) Then
			'Nodes connected by horizontal segment
			'Replace y coord by average of nodes y coordinates
			fAverageY = ( ObjectNodeY( oResult, iPoly, i ) + ObjectNodeY( oResult, iPoly, i + 1 ) ) / 2
			Alter Object oResult Node Set Position iPoly, i ( ObjectNodeX( oResult, iPoly, i ), fAverageY )
			Alter Object oResult Node Set Position iPoly, ( i + 1 ) ( ObjectNodeX( oResult, iPoly, i + 1 ), fAverageY )
			
		Else
			'Nodes connected by vertical segment
			'Replace x coord by average of nodes x coordinates
			fAverageX = ( ObjectNodeX( oResult, iPoly, i ) + ObjectNodeX( oResult, iPoly, i + 1 ) ) / 2
			Alter Object oResult Node Set Position iPoly, i ( fAverageX, ObjectNodeY( oResult, iPoly, i ) )
			Alter Object oResult Node Set Position iPoly, ( i + 1 ) ( fAverageX, ObjectNodeY( oResult, iPoly, i + 1 ) )
		End If
	Next
	
	'Last segment, back to start
	If iDirections( UBound( iDirections )) = Any( 1, 3 ) Then
		'Nodes connected by horizontal segment
		'Replace y coord by average of nodes y coordinates
		fAverageY = ( ObjectNodeY( oResult, iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ) + ObjectNodeY( oResult, iPoly, 1 ) ) / 2
		Alter Object oResult Node Set Position iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ( ObjectNodeX( oResult, iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ), fAverageY )
		Alter Object oResult Node Set Position iPoly, 1 ( ObjectNodeX( oResult, iPoly, 1 ), fAverageY )
		
	Else
		'Nodes connected by vertical segment
		'Replace x coord by average of nodes x coordinates
		fAverageX = ( ObjectNodeX( oResult, iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ) + ObjectNodeX( oResult, iPoly, 1 ) ) / 2
		Alter Object oResult Node Set Position iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ( fAverageX, ObjectNodeY( oResult, iPoly, ObjectInfo( oResult, OBJ_INFO_NPOLYGONS + iPoly ) ) )
		Alter Object oResult Node Set Position iPoly, 1 ( fAverageX, ObjectNodeY( oResult, iPoly, 1 ) )
	End If
	
	'Rotate back to original orientation
	oResult = RotateNodes( oResult, 1, oRingCentroid, 0 - fRotation )
	
	OrthagonalizeRing = oResult
End Function


Function ThreePointsToCircle( ByVal oPoint1 As Object, ByVal oPoint2 As Object, ByVal oPoint3 As Object ) As Object
	Dim fMa, fMb As Float
	Dim fX, fY As Float
	Dim fY1, fY2, fY3, fX1, fX2, fX3 As Float
	
	fY1 = CentroidY( oPoint1 )
	fY2 = CentroidY( oPoint2 )
	fY3 = CentroidY( oPoint3 )
	fX1 = CentroidX( oPoint1 )
	fX2 = CentroidX( oPoint2 )
	fX3 = CentroidX( oPoint3 )
	
	fMa = ( fY2 - fY1 ) / ( fX2 - fX1 )
	fMb = ( fY3 - fY2 ) / ( fX3 - fX2 )
	
	fX = ( fMa * fMb * ( fY1 - fY3 ) + fMb * ( fX1 + fX2 ) - fMa * ( fX2 + fX3 )) / ( 2 * ( fMb - fMa ))
	fY = ( - 1 / fMa ) * ( fX - ( fX1 + fX2 ) / 2 ) + ( fY1 + fY2 ) / 2
	
	Dim oCenter As Object
	oCenter = CreatePoint( fX, fY )
	
	Dim fRadius As Float
	fRadius = SphericalObjectDistance( oCenter, oPoint1, "m" )
	
	ThreePointsToCircle = Buffer( oCenter, 60, fRadius, "m" )
End Function


' see "Applet’s Algorithm": http://www.personal.kent.edu/~rmuhamma/Compgeometry/MyCG/CG-Applets/Center/centercli.htm
Function MinimumEnclosingCircle( ByVal sPointTable As String ) As Object
	Dim oHull, oMBR, oSmallCircle As Object
	Create Object As ConvexHull From sPointTable Into Variable oHull
	
	Dim iNoSides, iSideS1, iSideS2, iVertices As Integer
	iNoSides = ObjectInfo( oHull, OBJ_INFO_NPNTS ) - 1
	iVertices = iNoSides
	
	' pick any side, say S, of the convex hull
	iSideS1 = 1
	iSideS2 = 2
	
	Dim i As Integer
	Dim fAngleSubtended As Float
	Dim flenS1S2, fLenS1V, fLenS2V As Float
	Dim oS1, oS2, oV As Object
	Dim fAlpha As Float
	Dim fBeta, fGamma As Float
	Dim iV As Integer
	
	Dim n As Integer
	n = 1
	
	' For each vertex of H other than those of S, we compute the angle subtended by S.
	' The minimum such angle occurs at vertex v, and the value of the minimum angle is a (alpha).
	again:
	
	oS1 = CreatePoint( ObjectNodeX( oHull, 1, iSideS1 ), ObjectNodeY( oHull, 1, iSideS1 ))
	oS2 = CreatePoint( ObjectNodeX( oHull, 1, iSideS2 ), ObjectNodeY( oHull, 1, iSideS2 ))
	
	fAlpha = 360
	
	' "For each vertex of oHull:"
	For i = n to iVertices
		' "(other than those of S:)"
		If Not ( i = iSideS1 Or i = iSideS2 ) Then
			oV = CreatePoint( ObjectNodeX( oHull, 1, i ), ObjectNodeY( oHull, 1, i ))
			
			' "Compute angle subtended by S"
			flenS1S2 = SphericalObjectDistance( oS1, oS2, "m" )
			fLenS1V = SphericalObjectDistance( oS1, oV, "m" )
			fLenS2V = SphericalObjectDistance( oS2, oV, "m" )
			' (cosine rule)
			fAngleSubtended = Acos(( flenS1V^2 + fLenS2V^2 - fLenS1S2^2 ) / ( 2 * flenS1V * flenS2V )) * RAD_2_DEG
			
			' " The minimum such angle occurs at vertex v, and the value of the minimum angle is a (alpha)."
			If fAngleSubtended < fAlpha Then
				iV = i
				fAlpha = fAngleSubtended
			End If
		End If
	Next
	
	If fAlpha < 90 Then
		'"Goto step2"
		
		oV = CreatePoint( ObjectNodeX( oHull, 1, iV ), ObjectNodeY( oHull, 1, iV ))
		' "Compute angle subtended by S"
		flenS1S2 = SphericalObjectDistance( oS1, oS2, "m" )
		fLenS1V = SphericalObjectDistance( oS1, oV, "m" )
		fLenS2V = SphericalObjectDistance( oS2, oV, "m" )
		
		'"Since a < 90 degrees, check the remaining vertices of the triangle formed by S and v."
		fBeta = Acos(( flenS1S2^2 + fLenS2V^2 - fLenS1V^2 ) / ( 2 * flenS1S2 * flenS2V )) * RAD_2_DEG
		fGamma = Acos(( flenS1S2^2 + fLenS1V^2 - fLenS2V^2 ) / ( 2 * flenS1S2 * flenS1V )) * RAD_2_DEG
		
		' "IF no vertices are obtuse THEN We are done!"
		If ( fBeta >= 90 And fBeta < 180 ) Or ( fGamma >= 90 And fGamma < 180 ) Then
			' "If one of the other angles of the triangle formed by S and v is obtuse"
			
			' "then set S to be the side opposite the obtuse angle and repeat the main loop of the algorithm (i.e., Goto step 1 above)."
			If ( fBeta >= 90 And fBeta < 180 ) Then
				' S = s1->v
				iSideS1 = iSideS1
				iSideS2 = iV
			Else
				' S = s2 -> v
				iSideS1 = iV
				iSideS2 = iSideS2
			End If
			
			' "repeat the main loop of the algorithm (i.e., Goto step 1 above)."
			n = n + 1
			Goto again
		Else
			' done
			'  The MEC is determined by the vertices of S and the vertex v
			MinimumEnclosingCircle = ThreePointsToCircle( oS1, oS2, oV )
		End If
	Else
		' "The minimal enclosing circle is determined by the diametric circle of S"
		
		Dim fRad As Float
		fRad = SphericalObjectDistance( oS1, oS2, "m" ) / 2
		
		Dim fX, fY As Float
		fX = ( CentroidX( oS1 ) + CentroidX( oS2 )) / 2
		fY = ( CentroidY( oS1 ) + CentroidY( oS2 )) / 2
		
		Dim oCenter As Object
		oCenter = CreatePoint ( fX, fY )
		
		MinimumEnclosingCircle = Buffer( oCenter, 60, fRad, "m" )
	End If
	
End Function
